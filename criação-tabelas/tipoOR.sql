--CRIAR TIPO ENDEREÇO QUE É ATRIBUTO DE PESSOA É UMA NESTED TABLE
--QUE PODE ARMAZENAR ATRIBUTOS COMPOSTOS SEM VALOR FIXO
CREATE OR REPLACE TYPE tp_Endereco AS OBJECT ( 
    Numero NUMBER,
    CEP VARCHAR2 (255), 
    Cidade VARCHAR2 (255), 
    Rua VARCHAR2 (255), 
    Bairro VARCHAR2 (255), 
    Complemento VARCHAR2 (255) 
); 

/

CREATE OR REPLACE TYPE tp_lista_endereco AS TABLE OF tp_Endereco;

/
--CRIAR TIPO TELEFONE, QUE É VARRAY E PODE ARMAZENAR ATRIBUTOS MULTIVALORADOS, COM UMA
--QUANTIDADE FIXA DE ELEMENTOS DE FORMA ORDENADA
CREATE OR REPLACE TYPE tp_NumTelefone AS OBJECT ( 
    Numero VARCHAR2 (9) 
); 

/

CREATE OR REPLACE TYPE tp_Telefones AS VARRAY(2) OF tp_NumTelefone; 

/

--CRIAR OS TIPOS PESSOA QUE É NÃO INSTANCIÁVEL, OU SEJA, NÃO PODE EXISTIR UMA TABELA DESSE TIPO
--É NOT FINAL POIS EXISTEM TIPOS QUE HERDAM DELE
CREATE OR REPLACE TYPE tp_Pessoa AS OBJECT ( 
    CPF CHAR(3), 
    Nome VARCHAR2 (255), 
    Email VARCHAR2 (255), 
    Data_Nascimento DATE, 
    Endereco tp_lista_Endereco, 
    telefone tp_Telefones,
    -- MÉTODOS 
    MEMBER PROCEDURE infos
) NOT FINAL NOT INSTANTIABLE; 

/

-- HERANÇA DE TIPOS 
--TIPO CLIENTE QUE HERDA TODOS OS ATRIBUTOS DO TIPO PESSOA E NÃO ADICIONA NENHUM NOVO
CREATE TYPE tp_Cliente UNDER tp_Pessoa( 
); 
 

/
--CRIAR TIPO FUNCIONARIO QUE HERDA DE PESSOA E ADICIONA ATRIBUTOS E MÉTODOS NOVOS
--OVERRIDING MEMBER POIS VAI SOBRESCREVER O MÉTODO infos HERDADO DE PESSOA
CREATE TYPE tp_Funcionario UNDER tp_Pessoa ( 
    Matricula VARCHAR2 (255), 
    Salario NUMBER, 
    Cargo VARCHAR2 (255), 
    Data_de_admissao date, 
    supervisor REF tp_Funcionario, 
    OVERRIDING MEMBER PROCEDURE infos,
    MEMBER FUNCTION salario_anual RETURN NUMBER

)NOT FINAL; 

/

--TYPE BODY DE FUNCIONARIO QUE ESPECIFICA OS MÉTODOS OVERRIDING MEMBER PROCEDURE E MEMBER FUNCTION
--O MÉTODO infos PRINTA ALGUMAS INFORMAÇÕES DE FUNCIONÁRIO

--O MÉTODO salario_anual CALCULA O SALÁRIO RECEBIDO POR UM FUNCIONARIO NOS 12 MESES DO ANO
--E RETORNA COMO UM NUMBER
CREATE OR REPLACE TYPE BODY tp_Funcionario AS
    OVERRIDING MEMBER PROCEDURE infos IS
    BEGIN
        DBMS_OUTPUT.PUT_LINE(CPF);
        DBMS_OUTPUT.PUT_LINE(Nome);
        DBMS_OUTPUT.PUT_LINE(Salario);
        DBMS_OUTPUT.PUT_LINE(Cargo);
    END;

    MEMBER FUNCTION salario_anual RETURN NUMBER IS
    BEGIN
        RETURN Salario*12;
    END;
END;
/


--CRIAR TIPO VETERINÁRIO QUE HERDA DE FUNCIONÁRIO E ADICIONA O ATRIBUTO CRMV
--POSSUI UM CONSTRUTOR QUE HERDA OS ATRIBUTOS DE FUNCIONÁRIO
CREATE TYPE tp_Veterinario UNDER tp_Funcionario (  
    Numero_CRMV VARCHAR2 (255), 
    CONSTRUCTOR FUNCTION tp_Veterinario(x1 tp_Funcionario) RETURN SELF AS RESULT 
); 

/

CREATE OR REPLACE TYPE BODY tp_Veterinario AS 
    CONSTRUCTOR FUNCTION tp_Veterinario(x1 tp_Funcionario) RETURN SELF AS RESULT IS
    BEGIN
        cpf = x1.cpf;
        Nome = x1.Nome;
        email = x1.email;
        Data_nascimento = x1.Data_nascimento;
        Endereco = x1.Endereco;
        Telefone = x1.telefone;
        Matricula = x1.Matricula;
        Salario = x1.Salario;
        Cargo = x1.Cargo;
        Data_de_admissao = x1.Data_de_admissao;
        supervisor = x1.supervisor;
        Numero_CRMV = Numero_CRMV;
        RETURN;
    END;
END;

/

--CRIAR TIPO PET QUE É ENTIDADE FRACA, E TEM UM TIPO CLIENTE COMO ATRIBUTO
--QUE SERÁ ADICIONADO NO ALTER TYPE
CREATE OR REPLACE TYPE tp_Pet AS OBJECT ( 
    --dono REF tp_Cliente,
    Nome VARCHAR2 (255), 
    Espécie VARCHAR2 (255), 
    Raça VARCHAR2 (255), 
    Cor VARCHAR2 (255), 
    Data_de_nascimento DATE
); 

/
--ALTER TYPE QUE ADICIONA ATRIBUTO dono (CLIENTE) NO TIPO PET
--É CASCADE POIS PROPAGA A MUDANÇA PARA OS TIPOS DEPENDENTES
ALTER TYPE tp_pet ADD ATTRIBUTE (dono REF tp_Cliente) CASCADE;

/

--CRIAÇÃO TIPO SERVIÇO QUE TEM MÉTODO ORDER MEMBER
--ORDER MEMBER FUNCTION COMPARA O OBJETO ATUAL (SELF) COM O PASSADO COMO PARÂMETRO
CREATE OR REPLACE TYPE tp_Servico AS OBJECT ( 
    Tipo_Servico VARCHAR2 (255), 
    Preco_Servico NUMBER, 
    --MÉTODOS 
    ORDER MEMBER FUNCTION comparaServico (SELF IN OUT NOCOPY tp_Servico, x tp_Servico) RETURN NUMBER
); 

/
--TYPO BODY DE SERVIÇO COM IMPLEMENTAÇÃO DE ORDER MEMBER
--O MÉTODO comparaServico COMPARA OS PREÇOS DOS SERVIÇOS E RETORNA QUAL É O MAIS CARO ENTRE OS DOIS
--RETORNA 0 SE TEM O MESMO PREÇO, 1 SE O SERVIÇO 1 (SELF) É MAIS CARO E -1 SE O SERVIÇO 2 É MAIS CARO
CREATE OR REPLACE TYPE BODY tp_Servico AS 
    ORDER MEMBER FUNCTION comparaServico(SELF IN OUT NOCOPY tp_Servico, x tp_Servico) RETURN NUMBER IS
    BEGIN
        IF SELF.Preco_Servico > x.Preco_Servico THEN
            RETURN 1;
        ELSIF SELF.Preco_Servico < x.Preco_Servico THEN
            RETURN -1;
        ELSE
            RETURN 0;
        END IF;
    END;
END;


/
--CRIAÇÃO TIPO PRODUTO COM MÉTODOS FINAL MEMBER PROCEDURE E MAP MEMBER FUNCTION
--O FINAL DO MEMBER PROCEDURE exibir_detalhes NÃO PERMITE QUE ESSE MÉTODO SEJA 
--SOBRESCRITO PELOS SEUS SUBTIPOS
CREATE OR REPLACE TYPE tp_Produto AS OBJECT ( 
    Codigo INTEGER, 
    Preco NUMBER, 
    Lote CHAR(4), 
    Estoque NUMBER, 
    Fabricacao DATE,  
    Validade DATE,  
    Marca VARCHAR2 (255),  
    Nome VARCHAR2 (255),
    --MÉTODOS 
    FINAL MEMBER PROCEDURE exibir_detalhes,
    MAP MEMBER FUNCTION qnt_produtos RETURN NUMBER
); 

/
--TYPE BODY COM IMPLEMENTAÇÃO DOS MÉTODOS exibir_detalhes E qtd_produtos
--O MÉTODO exibir_detalhes PRINTA ALGUNS ATRIBUTOS DO TIPO PRODUTO

--O MÉTODO MAP MEMBER FUNCTION É USADO PARA FAZER UMA COMPARAÇÃO DE UM ATRIBUTO DE UM TIPO COM
--OUTRO DE MESMO TIPO, DE INSTÂNCIAS DIFERENTES
--O qnt_produtos RETORNA QUANTOS PRODUTOS DE PREÇO MAIOR QUE 30 EXISTEM NO POVOAMENTO
CREATE OR REPLACE TYPE BODY tp_Produto AS
FINAL MEMBER PROCEDURE exibir_detalhes IS
    BEGIN
        DBMS_OUTPUT.PUT_LINE('Codigo: ' || TO_CHAR(Codigo));
        DBMS_OUTPUT.PUT_LINE('Nome: ' || Nome);
        DBMS_OUTPUT.PUT_LINE('Preco: ' || TO_CHAR(Preco));
        DBMS_OUTPUT.PUT_LINE('Lote: ' || Lote);
        DBMS_OUTPUT.PUT_LINE('Quantidade em estoque: ' || TO_CHAR(Estoque));
        DBMS_OUTPUT.PUT_LINE('Data de validade: ' || TO_CHAR(Validade));
    END;

MAP MEMBER FUNCTION qnt_produtos RETURN NUMBER IS
     aux_contagem NUMBER;
         BEGIN   
             SELECT COUNT (*) INTO aux_contagem FROM tb_Produto WHERE Preco > 30;
             RETURN aux_contagem;
         END;
END;
/

--CRIAÇÃO DO TIPO DE RELACIONAMENTO ATENDE
CREATE OR REPLACE TYPE tp_Atende AS OBJECT ( 
    funcionario REF tp_Funcionario, 
    pet REF tp_Pet, 
    servico REF tp_Servico, 
    cliente REF tp_Cliente, 
    dt_atendimento TIMESTAMP
    --MÉTODOS 
); 

/
--CRIAÇÃO DA ENTIDADE ASSOCIATIVA CONSULTA
--JÁ QUE NUMA CONSULTA NEM SEMPRE SE PRESCREVE UM PRODUTO
CREATE OR REPLACE TYPE tp_Consulta AS OBJECT ( 
    veterinario REF tp_Veterinario, 
    pet REF tp_Pet, 
    cliente REF tp_Cliente, 
    produto REF tp_Produto, 
    dt_consulta TIMESTAMP
); 


/
--CRIAÇÃO DO TIPO DO RELACIOMENTO COMPRA
CREATE OR REPLACE TYPE tp_Compra AS OBJECT ( 
    cliente REF tp_Cliente, 
    produto REF tp_Produto, 
    dt_compra TIMESTAMP

); 

